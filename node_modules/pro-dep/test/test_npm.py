import json
from subprocess import check_call

import pytest

from helpers import make_install_str, git_log


@pytest.mark.parametrize('name, version, url, with_bins', [
    ('lodash', None, None, False),
    ('lodash', '2.2.0', None, False),
    ('lodash', '2.2.0', 'git+ssh://git@github.com:lodash/lodash.git#2.2.0', False),
    ('gulp', None, None, True),
    ('pro-dep', '0.3.1', "git+ssh://git@gitorious.poc.currdc.net:prototyping/pro-dep.git#0.3.1", True)
])
def test_npm_install(dep_cmd, node_modules_path, name, version, url, with_bins):
    install_str = make_install_str(name, version, url, '@')

    assert check_call([dep_cmd, 'npm-install', install_str]) == 0

    with node_modules_path.join(name, 'package.json').open() as f:
        pkg_json = json.loads(f.read())
        if version is not None:
            assert version == pkg_json['version']

    with open('package.json') as f:
        pkg_json = json.loads(f.read())
        assert name in pkg_json['devDependencies']
        if version is not None:
            assert version in pkg_json['devDependencies'][name]

    log = git_log()
    install_log = "(DEP) Install npm package '{name}'".format(name=name)
    ignore_log = "(DEP) Ignore binaries from npm package '{name}'".format(name=name)
    if with_bins:
        assert len(log) == 3
        assert ignore_log == log[0]
        assert install_log == log[1]
    else:
        assert len(log) == 2
        assert install_log == log[0]


@pytest.mark.parametrize('name', [
    ('lodash'),
    ('gulp')
])
def test_npm_uninstall(dep_cmd, node_modules_path, name):
    assert check_call([dep_cmd, 'npm-install', name]) == 0
    assert check_call([dep_cmd, 'npm-uninstall', name]) == 0
