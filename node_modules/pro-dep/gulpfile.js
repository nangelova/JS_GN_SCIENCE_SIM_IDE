'use strict';

var gulp = require('gulp');
var template = require('gulp-template');
var fs = require('fs');
var prompt = require('prompt');
var git = require('gulp-git');
var bump = require('gulp-bump');
var changeCase = require('change-case');


gulp.task('init', function (cb) {

        var promptValues = [
            {
                name: 'packageName',
                validator: /^[a-z\-]+$/,
                message: 'Name to use for the package',
                warning: 'Package name must include only lower case letters and dashes.',
            },
        ];

        prompt.start();
        prompt.get(promptValues, function (err, result) {

            result.moduleName = changeCase.camelCase(result.packageName);

            gulp.src(['package.json', 'packageName.js'], {base: '.'})
                .pipe(template(result))
                .pipe(gulp.dest('.'))
                .on('close', function () {

                    fs.renameSync('packageName.js', result.packageName + '.js');
                    cb();
                });
        });
});


gulp.task('bump', function (gulpCb) {

        var mapOfTypes = {p: 'patch', i: 'minor', j: 'major'};
        var promptValues = [{
            name: 'type',
            message: 'Which version to bump? ([p]atch, m[i]nor, or ma[j]or)',
            validator: /^[pij]$/,
        }];

        prompt.start();
        prompt.get(promptValues, function (err, result) {

            gulp.src('./package.json')
                .pipe(bump({
                    type: mapOfTypes[result.type]
                }))
                .pipe(gulp.dest('./'))
                .pipe(git.commit('[AUTO] Bump version.'))
                .on('end', gulpCb);
        });
});
